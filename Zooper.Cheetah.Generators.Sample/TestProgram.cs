using System;
using MassTransit;
using Microsoft.Extensions.DependencyInjection;
using Zooper.Cheetah.Generators.Sample.Consumers;
using Zooper.Cheetah.Generators.Sample.Events;
using Zooper.Cheetah.Integrations.AzureServiceBus.Endpoints;
using Zooper.Cheetah.Integrations.RabbitMq.Endpoints;

namespace Zooper.Cheetah.Generators.Sample;

public class TestProgram
{
	public static void Main()
	{
		Console.WriteLine("Starting test program");

		var services = new ServiceCollection();

		// Register consumers 
		services.AddMassTransit(x =>
		{
			// Register consumers explicitly
			x.AddConsumer<AccountCreatedConsumer>();
			x.AddConsumer<AccountCreatedConsumerV2>();
			x.AddConsumer<TestConsumer>();

			// Configure service bus
			x.UsingAzureServiceBus((context, cfg) =>
			{
				// This is where the generated extension method should be called
				// Should be automatically generated by the source generator
				cfg.Host("your-connection-string-here");

				// Instead of manually configuring each consumer here,
				// we'll use the auto-generated ConfigureEndpoints method
				// which is the proper approach for MassTransit

				// Use the ConfigureEndpoints extension method from our generator
				// This method will be generated with the proper configuration
				// for each consumer based on message attributes
				cfg.ConfigureEndpoints(context);
			});

			// Also configure RabbitMQ
			x.UsingRabbitMq((context, cfg) =>
			{
				// This is where the generated extension method should be called
				// Should be automatically generated by the source generator 
				cfg.Host("localhost");

				// Instead of manually configuring each consumer here,
				// we'll use the auto-generated ConfigureEndpoints method
				// which is the proper approach for MassTransit

				// Use the ConfigureEndpoints extension method from our generator
				// This method will be generated with the proper configuration
				// for each consumer based on message attributes
				cfg.ConfigureEndpoints(context);
			});
		});
	}
}